#+title: Wavemacs Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* Wavemacs Configuration
Let's try to configure emacs using org mode.

** First things first, package management
I will use *straight.el* as package maneger with *use-package* integration so I am disabling *package.el* in *early-init.el*

*** Disable package.el
#+begin_src emacs-lisp :tangle ./.emacs.d/early-init.el

(setq package-enable-at-startup nil)

#+end_src

*** Here i modify module load path to include wavemacs modules
Normally i would seperate the configuration into multiple files or packages
But since I decided to write this in org-mode I am going to try to
tangle all of the configuration into 'init.el'

#+begin_src emacs-lisp :tangle no

  ;; (let ((default-directory  (concat user-emacs-directory "waveemacs")))
  ;;   (normal-top-level-add-to-load-path '("."))
  ;;   (normal-top-level-add-subdirs-to-load-path))
  ;; (require 'wavemacs)

  ;; (defun wavemacs-load-file (fname)
  ;;   (load-file (concat user-emacs-directory "wavemacs/" fname ".el")))

  ;; (dolist
  ;;     (f '("packages"
  ;;          "completion"
  ;;          "ui"
  ;;          "options"))
  ;;   (wavemacs-load-file f))

  ;; (provide 'wavemacs)

#+end_src

*** Continuing with package manager configuration

#+begin_src emacs-lisp

  ;;(setq straight-recipes-emacsmirror-use-mirror 'nil)
  ;; Default repo list (org-elpa melpa gnu-elpa-mirror el-get emacsmirror)
  ;;(setq straight-recipe-repositories
  ;;      '("org-elpa" "melpa" "gnu-elpa-mirror" "el-get"))
  (setq straight-recipe-repositories 'nil)

  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

** Kind of better-defaults

#+begin_src emacs-lisp

  ;; Set Options
  ;;;; Disable annoying ring-bell when backspace key is pressed in certain situations
  ;;(setq ring-bell-function 'ignore)
  (setq visible-bell t) ;; why not???

  ;;;; y or n promt
  (setq use-short-answers t)

  ;;;; Disable scrollbar and toolbar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room(scroll-bar-mode -1)

  ;;;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;;;; Longer whitespace, otherwise syntax highlighting is limited to default column
  ;;(setq whitespace-line-column 1000)

  ;; Allow for minibuffer-ception. Sometimes we need another minibuffer command
  ;; while we're in the minibuffer.
  (setq enable-recursive-minibuffers t)

  ;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
  ;; feedback after typing is better UX than no feedback at all.
  (setq echo-keystrokes 0.02)

  ;; Expand the minibuffer to fit multi-line text displayed in the echo-area. This
  ;; doesn't look too great with direnv, however...
  (setq resize-mini-windows 'grow-only)

  ;; A simple frame title
  (setq frame-title-format '("%b â€“ WavEmacs")
        icon-title-format frame-title-format)

  ;;;; Enable soft-wrap
  (global-visual-line-mode 1)
  (setq column-number-mode t)

  ;;;; Maintain a list of recent files opened
  (recentf-mode 1)
  (setq recentf-max-saved-items 50)

  ;;;; Move all the backup files to specific cache directory
  ;;;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;;;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR
  (setq user-cache-directory (concat user-emacs-directory "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
    url-history-file (expand-file-name "url/history" user-cache-directory)
    auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
    projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

  ;;;; Coding specific setting
  ;;;; Automatically add ending brackets and braces
  (electric-pair-mode 1)

  ;;;; Make sure tab-width is 4 and not 8
  (setq-default tab-width 4)

  ;;;; Highlight matching brackets and braces
  (show-paren-mode 1)

  ;;; Line numbers
  ;; Explicitly define a width to reduce the cost of on-the-fly computation
  (setq-default display-line-numbers-width 3)

  ;; Show absolute line numbers for narrowed regions to make it easier to tell the
  ;; buffer is narrowed, and where you are, exactly.
  (setq-default display-line-numbers-widen t)

  (setq-default indent-tabs-mode nil)
  (setq select-enable-clipboard t
    select-enable-primary t
    save-interprogram-paste-before-kill t
    apropos-do-all t
    mouse-yank-at-point t
    save-place-file (concat user-emacs-directory "places")
    backup-directory-alist `(("." . ,(concat user-emacs-directory"backups")))
    uniquify-buffer-name-style 'forward
    image-animate-loop t)

  ;; Ediff
  (advice-add 'ediff-window-display-p :override #'ignore)
  ;;(ediff)

#+end_src

** UI

*** Theme
Doom themes are great!

#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :init
  (load-theme 'doom-dracula t))

  (use-package heaven-and-hell
    :ensure t
    :init
    (setq heaven-and-hell-theme-type 'dark)
    (setq heaven-and-hell-themes
      '((light . doom-nord-light)
        (dark . doom-dracula)))
    :hook (after-init . heaven-and-hell-init-hook)
    :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
       ("<f6>" . heaven-and-hell-toggle-theme)))

#+end_src

*** Modline
Also doom modline!

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

*** Other UI Releated Things

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :commands (all-the-icons-octicon
               all-the-icons-faicon
               all-the-icons-fileicon
               all-the-icons-wicon
               all-the-icons-material
               all-the-icons-alltheicon)
    :config
    (unless
        ;; A quick way to check if the fonts are installed
        ;; Another aproach would be to use 'memoize.el'
        (and (file-exists-p (expand-file-name "~/.local/share/fonts/all-the-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/file-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/fontawesome.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/material-design-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/octicons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/weathericons.ttf")))
      (all-the-icons-install-fonts t)))


    (use-package all-the-icons-completion
      :config
      (all-the-icons-completion-mode))

    ;; Many major modes do no highlighting of number literals, so we do it for them
    (use-package highlight-numbers
      :hook ((prog-mode conf-mode) . highlight-numbers-mode)
      :config (setq highlight-numbers-generic-regexp "\\_<[[:digit:]]+\\(?:\\.[0-9]*\\)?\\_>"))

    (use-package hl-line
      ;; Highlights the current line
      :init
      (defvar global-hl-line-modes
        '(prog-mode text-mode conf-mode special-mode
                    org-agenda-mode dired-mode)
        "What modes to enable `hl-line-mode' in.")
      (global-hl-line-mode))

#+end_src


** Completion
Okay, let's go with Vertico/Consult way...

*** TODO Vertico
#+begin_src emacs-lisp

  (defvar +vertico-company-completion-styles '(basic partial-completion orderless)
    "Completion styles for company to use.

  The completion/vertico module uses the orderless completion style by default,
  but this returns too broad a candidate set for company completion. This variable
  overrides `completion-styles' during company completion sessions.")

  (defvar +vertico-consult-fd-args nil
    "Shell command and arguments the vertico module uses for fd.")

  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t))

  (use-package vertico-posframe
    :hook (vertico-mode . vertico-posframe-mode))

#+end_src

*** TODO Consult

#+begin_src emacs-lisp

  ;; TODO Configure this!!!!
  (use-package consult
    :ensure t)

  (use-package consult-dir
    :ensure t
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file)))

  (use-package consult-flycheck)

#+end_src

*** Embark

#+begin_src emacs-lisp
  ;; Configure Embark
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

*** Orderless
Completion styles for consult

#+begin_src emacs-lisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Marginalia
Enable descriptions/annotations for completion minibuffer

#+begin_src emacs-lisp
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

#+end_src


** Coding

*** Best Git FE Ever!

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :init
    (setq magit-diff-refine-hunk t))
#+end_src

*** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    (setq projectile-project-search-path '(("~/projects/" . 1) "~/work/" ("~/stuff" . 1)))
    (setq projectile-switch-project-action #'projectile-dired)

    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

  (use-package rg
    :ensure t
    :init
    (rg-enable-default-bindings))

  (use-package ag
    :ensure t)

#+end_src

** TODO Org-Mode

** Term

*** TODO VTerm
Needs some more configuration. zsh escape codes, tmux ecc...
#+begin_src emacs-lisp
  ;; TODO set this variable to avoid compile module prompt 
  ;;(setq vterm-always-compile-module t)
  (use-package vterm
    :ensure t)
#+end_src

** Miscellaneous

Various stuff that doesn't belong to a spesific place...

#+begin_src emacs-lisp

  ;; Show keybindings after delay
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  ;; Some times it's useful to see the list of commands executed
  (use-package command-log-mode)

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Better help docs
  (use-package helpful
    :ensure t
    :init
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-h .") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function))
#+end_src
