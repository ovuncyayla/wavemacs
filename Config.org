#+title: Wavemacs Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* Wavemacs Configuration
Let's try to configure emacs using org mode.

** TODO Dependencies
- Ripgrep(counsult default grep)
- fd
- Cmake (for vterm)

** First things first, package management
I will use *straight.el* as package maneger with *use-package* integration so I am disabling *package.el* in *early-init.el*

*** Disable package.el
#+begin_src emacs-lisp :tangle ./.emacs.d/early-init.el

(setq package-enable-at-startup nil)

#+end_src

*** Here i modify module load path to include wavemacs modules
Normally i would seperate the configuration into multiple files or packages
But since I decided to write this in org-mode I am going to try to
tangle all of the configuration into 'init.el'

#+begin_src emacs-lisp :tangle no

  ;; (let ((default-directory  (concat user-emacs-directory "waveemacs")))
  ;;   (normal-top-level-add-to-load-path '("."))
  ;;   (normal-top-level-add-subdirs-to-load-path))
  ;; (require 'wavemacs)

  ;; (defun wavemacs-load-file (fname)
  ;;   (load-file (concat user-emacs-directory "wavemacs/" fname ".el")))

  ;; (dolist
  ;;     (f '("packages"
  ;;          "completion"
  ;;          "ui"
  ;;          "options"))
  ;;   (wavemacs-load-file f))

  ;; (provide 'wavemacs)

#+end_src

*** Continuing with package manager configuration

#+begin_src emacs-lisp

  ;;(setq straight-recipes-emacsmirror-use-mirror 'nil)
  ;; Default repo list (org-elpa melpa gnu-elpa-mirror el-get emacsmirror)
  ;;(setq straight-recipe-repositories
  ;;      '("org-elpa" "melpa" "gnu-elpa-mirror" "el-get"))
  (setq straight-recipe-repositories 'nil)

  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

** Kind of better-defaults

#+begin_src emacs-lisp

  ;; Set Options
  ;;;; Disable annoying ring-bell when backspace key is pressed in certain situations
  ;;(setq ring-bell-function 'ignore)
  (setq visible-bell t) ;; why not???

  ;;;; y or n promt
  (setq use-short-answers t)

  ;;;; Disable scrollbar and toolbar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room(scroll-bar-mode -1)

  ;;;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;;;; Longer whitespace, otherwise syntax highlighting is limited to default column
  ;;(setq whitespace-line-column 1000)

  ;; Allow for minibuffer-ception. Sometimes we need another minibuffer command
  ;; while we're in the minibuffer.
  (setq enable-recursive-minibuffers t)

  ;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
  ;; feedback after typing is better UX than no feedback at all.
  (setq echo-keystrokes 0.02)

  ;; Expand the minibuffer to fit multi-line text displayed in the echo-area. This
  ;; doesn't look too great with direnv, however...
  (setq resize-mini-windows 'grow-only)

  ;; A simple frame title
  (setq frame-title-format '("%b â€“ WavEmacs")
        icon-title-format frame-title-format)

  ;;;; Enable soft-wrap
  (global-visual-line-mode 1)
  (setq column-number-mode t)

  ;;;; Maintain a list of recent files opened
  (recentf-mode 1)
  (setq recentf-max-saved-items 50)

  ;;;; Move all the backup files to specific cache directory
  ;;;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;;;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR
  (setq user-cache-directory (concat user-emacs-directory "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
    url-history-file (expand-file-name "url/history" user-cache-directory)
    auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
    projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

  ;;;; Coding specific setting
  ;;;; Automatically add ending brackets and braces
  (electric-pair-mode 1)

  ;;;; Make sure tab-width is 4 and not 8
  (setq-default tab-width 4)

  ;;;; Highlight matching brackets and braces
  (show-paren-mode 1)

  ;;; Line numbers
  ;; Explicitly define a width to reduce the cost of on-the-fly computation
  (setq-default display-line-numbers-width 3)

  ;; Show absolute line numbers for narrowed regions to make it easier to tell the
  ;; buffer is narrowed, and where you are, exactly.
  (setq-default display-line-numbers-widen t)

  (setq-default indent-tabs-mode nil)
  (setq select-enable-clipboard t
    select-enable-primary t
    save-interprogram-paste-before-kill t
    apropos-do-all t
    mouse-yank-at-point t
    save-place-file (concat user-emacs-directory "places")
    backup-directory-alist `(("." . ,(concat user-emacs-directory"backups")))
    uniquify-buffer-name-style 'forward
    image-animate-loop t)

  ;; Ediff
  ;; Don't create new frames for ediff session
  (advice-add 'ediff-window-display-p :override #'ignore)

  ;; Restor window configuration after ediff session
  (defvar ediff-last-windows nil
    "Last ediff window configuration.")

  (defun ediff-restore-windows ()
    "Restore window configuration to `ediff-last-windows'."
    (set-window-configuration ediff-last-windows)
    (remove-hook 'ediff-after-quit-hook-internal
                 'ediff-restore-windows))

  (defadvice ediff-buffers (around ediff-restore-windows activate)
    (setq ediff-last-windows (current-window-configuration))
    (add-hook 'ediff-after-quit-hook-internal 'ediff-restore-windows)
    ad-do-it)
  ;;(ediff)

#+end_src

** UI

*** Theme
Doom themes are great!

#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :init
  (load-theme 'doom-1337 t))

  (use-package heaven-and-hell
    :ensure t
    :init
    (setq heaven-and-hell-theme-type 'dark)
    (setq heaven-and-hell-themes
      '((light . doom-nord-light)
        (dark . doom-1337)))
    :hook (after-init . heaven-and-hell-init-hook)
    :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
       ("<f6>" . heaven-and-hell-toggle-theme)))

#+end_src

*** Modline
Also doom modline!

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

*** TODO Dashboard
- Customize list of actions for dashboar

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (dashboard-setup-startup-hook))
#+end_src

*** Tabs

#+begin_src emacs-lisp
    (use-package centaur-tabs
      :ensure t
      :init
      (centaur-tabs-mode t)
      (setq centaur-tabs-enable-key-bindings t)
  ;;    :config
      (setq centaur-tabs-style "bar"
            centaur-tabs-height 32
            centaur-tabs-set-icons t
            centaur-tabs-show-new-tab-button t
            centaur-tabs-set-modified-marker t
            centaur-tabs-show-navigation-buttons t
            centaur-tabs-set-bar 'under
            centaur-tabs-show-count nil
            ;; centaur-tabs-label-fixed-length 15
            ;; centaur-tabs-gray-out-icons 'buffer
            ;; centaur-tabs-plain-icons t
            x-underline-at-descent-line t
            centaur-tabs-left-edge-margin nil)
      (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
      (centaur-tabs-headline-match)
      ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
      ;; (setq centaur-tabs-adjust-buffer-order t)
      ;; (centaur-tabs-mode t)
      (setq uniquify-separator "/")
      (setq uniquify-buffer-name-style 'forward)
      (defun centaur-tabs-buffer-groups ()
        "`centaur-tabs-buffer-groups' control buffers' group rules.

    Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
    All buffer name start with * will group to \"Emacs\".
    Other buffer group by `centaur-tabs-get-group-name' with project name."
        (list
         (cond
          ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
          ;; "Remote")
          ((or (string-equal "*" (substring (buffer-name) 0 1))
               (memq major-mode '(magit-process-mode
                                  magit-status-mode
                                  magit-diff-mode
                                  magit-log-mode
                                  magit-file-mode
                                  magit-blob-mode
                                  magit-blame-mode
                                  )))
           "Emacs")
          ((derived-mode-p 'prog-mode)
           "Editing")
          ((derived-mode-p 'dired-mode)
           "Dired")
          ((memq major-mode '(helpful-mode
                              help-mode))
           "Help")
          ((memq major-mode '(org-mode
                              org-agenda-clockreport-mode
                              org-src-mode
                              org-agenda-mode
                              org-beamer-mode
                              org-indent-mode
                              org-bullets-mode
                              org-cdlatex-mode
                              org-agenda-log-mode
                              diary-mode))
           "OrgMode")
          (t
           (centaur-tabs-get-group-name (current-buffer))))))
      :hook
      (dashboard-mode . centaur-tabs-local-mode)
      (term-mode . centaur-tabs-local-mode)
      (calendar-mode . centaur-tabs-local-mode)
      (org-agenda-mode . centaur-tabs-local-mode)
      :bind
      ("C-<prior>" . centaur-tabs-backward)
      ("C-<next>" . centaur-tabs-forward)
      ("C-S-<prior>" . centaur-tabs-move-current-tab-to-left)
      ("C-S-<next>" . centaur-tabs-move-current-tab-to-right))
#+end_src

*** Other UI Releated Things

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :commands (all-the-icons-octicon
               all-the-icons-faicon
               all-the-icons-fileicon
               all-the-icons-wicon
               all-the-icons-material
               all-the-icons-alltheicon)
    :init
    (unless
        ;; A quick way to check if the fonts are installed
        ;; Another aproach would be to use 'memoize.el'
        (and (file-exists-p (expand-file-name "~/.local/share/fonts/all-the-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/file-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/fontawesome.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/material-design-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/octicons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/weathericons.ttf")))
      (all-the-icons-install-fonts t)))


    (use-package all-the-icons-completion
      :ensure t
      :after all-the-icons
      :init
      (all-the-icons-completion-mode t))

    ;; Many major modes do no highlighting of number literals, so we do it for them
    (use-package highlight-numbers
      :hook ((prog-mode conf-mode) . highlight-numbers-mode)
      :config (setq highlight-numbers-generic-regexp "\\_<[[:digit:]]+\\(?:\\.[0-9]*\\)?\\_>"))

    (use-package hl-line
      ;; Highlights the current line
      :init
      (defvar global-hl-line-modes
        '(prog-mode text-mode conf-mode special-mode
                    org-agenda-mode dired-mode)
        "What modes to enable `hl-line-mode' in.")
      (global-hl-line-mode))

#+end_src


** Completion
Okay, let's go with Vertico/Consult way...

*** TODO Vertico
#+begin_src emacs-lisp

    (use-package vertico
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :init
      (vertico-mode)

      ;; Different scroll margin
      ;; (setq vertico-scroll-margin 0)

      ;; Show more candidates
      (setq vertico-count 20)

      ;; Grow and shrink the Vertico minibuffer
      (setq vertico-resize t)

      ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
      (setq vertico-cycle t))

      ;; (use-package vertico-posframe
      ;;   :hook (vertico-mode . vertico-posframe-mode))

    (use-package vertico-multiform
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico
      :init

      (setq vertico-multiform-commands
        '(
          ;; (consult-line
          ;;  posframe
          ;;  (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
          ;;  (vertico-posframe-border-width . 10)
          ;;  ;; NOTE: This is useful when emacs is used in both in X and
          ;;  ;; terminal, for posframe do not work well in terminal, so
          ;;  ;; vertico-buffer-mode will be used as fallback at the
          ;;  ;; moment.
          ;; (vertico-posframe-fallback-mode . vertico-buffer-mode)
          (execute-extended-command indexed reverse)
          (t buffer)
          ))

      ;; Enable vertico-multiform
         (vertico-multiform-mode t))

    (use-package vertico-indexed
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico)

    (use-package vertico-quick
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico)

    (use-package vertico-reverse
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico)

    ;; Configure directory extension.
    (use-package vertico-directory
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico
      :ensure t
      ;; More convenient directory navigation commands
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

    (use-package vertico-mouse
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico
      :init
      (vertico-mouse-mode)
      ;; vertico-mouse-face intherits from face 'hightlight'
      ;; Some how the default foregroung and backgroung colors are all white for 'highlight' face
      ;; which causes unreadable line when you highlight the completion with mouse
      (set-face-foreground 'vertico-mouse "navy"))
  ;;    :init (vertico-mouse-mode))


#+end_src

*** Consult

#+begin_src emacs-lisp

  (use-package consult
    :ensure t
    :bind (
           ;;:map vertico-map
           ("C-x b" . consult-buffer)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s i" . consult-imenu)
           ("M-s I" . consult-imenu-multi)
           ("M-s f" . consult-focus-lines)
           ("M-s K" . consult-keep-lines)

           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-ripgrep)

           ("M-y" . consult-yank-pop)                ;; orig. yank-pop

           ;; Custom M-# bindings for fast register access
           ("M-\"" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-\"" . consult-register)

           ;;("M-g e" . consult-compile-error)
           ;;("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g M" . consult-global-mark)

           ;; Help Commands
           ("C-h I" . consult-info)
           ([remap Info-search] . consult-info)
           ;;("C-h S-m" . consult-man) ;; TODO

           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x C-d" . consult-dir)
           ;;("C-x C-j" . consult-dir-jump-file) TODO
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ("C-x K" . consult-kmacro)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           )
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    )

  (use-package consult-dir
    :ensure t)

  (use-package consult-flycheck)

#+end_src

*** TODO Childframe Support for Completion at Point

#+begin_src emacs-lisp
  ;; Enable Corfu completion UI
  ;; See the Corfu README for more configuration tips.
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode))

  ;; Add extensions
  (use-package cape
    :ensure t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("M-p p" . completion-at-point) ;; capf
           ("M-p t" . complete-tag)        ;; etags
           ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("M-p h" . cape-history)
           ("M-p f" . cape-file)
           ("M-p k" . cape-keyword)
           ("M-p s" . cape-symbol)
           ("M-p a" . cape-abbrev)
           ("M-p i" . cape-ispell)
           ("M-p l" . cape-line)
           ("M-p w" . cape-dict)
           ("M-p \\" . cape-tex)
           ("M-p _" . cape-tex)
           ("M-p ^" . cape-tex)
           ("M-p &" . cape-sgml)
           ("M-p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

*** Embark

#+begin_src emacs-lisp
  ;; Configure Embark
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

#+end_src

*** Orderless
Completion styles for consult

#+begin_src emacs-lisp
  (use-package orderless
              :config
              (defun +orderless--consult-suffix ()
              "Regexp which matches the end of string with Consult tofu support."
              (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
                  (format "[%c-%c]*$"
                          consult--tofu-char
                          (+ consult--tofu-char consult--tofu-range -1))
                "$"))

              ;; Recognizes the following patterns:
              ;; * .ext (file extension)
              ;; * regexp$ (regexp matching at end)
              (defun +orderless-consult-dispatch (word _index _total)
                (cond
                 ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
                 ((string-suffix-p "$" word)
                  `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
               ;; File extensions
                 ((and (or minibuffer-completing-file-name
                           (derived-mode-p 'eshell-mode))
                       (string-match-p "\\`\\.." word))
                  `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

              ;; Define orderless style with initialism by default
              (orderless-define-completion-style +orderless-with-initialism
                (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

              (setq completion-styles '(orderless basic)
                    completion-category-defaults nil
                  ;;; Enable partial-completion for files.
                  ;;; Either give orderless precedence or partial-completion.
                  ;;; Note that completion-category-overrides is not really an override,
                  ;;; but rather prepended to the default completion-styles.
                    ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
                    completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                                    ;; enable initialism by default for symbols
                                                    (command (styles +orderless-with-initialism))
                                                    (variable (styles +orderless-with-initialism))
                                                    (symbol (styles +orderless-with-initialism)))
                  orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
                  orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                                    #'orderless-affix-dispatch))
              (defun fix-dollar (args)
                (if (string-suffix-p "$" (car args))
                    (list (format "%s[%c-%c]*$"
                                  (substring (car args) 0 -1)
                                  consult--tofu-char
                                (+ consult--tofu-char consult--tofu-range -1)))
                  args))
              (advice-add #'orderless-regexp :filter-args #'fix-dollar)
              (advice-add #'prescient-regexp-regexp :filter-args #'fix-dollar)
              )
#+end_src

*** Marginalia
Enable descriptions/annotations for completion minibuffer

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

#+end_src


** Coding

*** Best Git FE Ever!

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :init
    (setq magit-diff-refine-hunk t))
#+end_src

*** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    (setq projectile-project-search-path '(("~/projects/" . 1) "~/work/" ("~/stuff" . 1)))
    (setq projectile-switch-project-action #'projectile-dired)

    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

  (use-package rg
    :ensure t
    :init
    (rg-enable-default-bindings))

  (use-package ag
    :ensure t)

#+end_src

** TODO Org-Mode

** Terminal

*** TODO VTerm
Needs some more configuration. zsh escape codes, tmux ecc...
#+begin_src emacs-lisp
      ;; TODO set this variable to avoid compile module prompt
      ;;(setq vterm-always-compile-module t)
      (use-package vterm
        :ensure t
        :init
        (setq vterm-shell 'eshell))
#+end_src

*** TODO Eshell

** Miscellaneous

Various stuff that doesn't belong to a spesific place...

#+begin_src emacs-lisp

  ;; Show keybindings after delay
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  ;; Some times it's useful to see the list of commands executed
  (use-package command-log-mode)

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Better help docs
  (use-package helpful
    :ensure t
    :init
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-h .") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function))

  (use-package ace-jump-mode
    :config
    ;;
    ;; enable a more powerful jump back function from ace jump mode
    ;;
    ;; (ace-jump-mode-pop-mark)
    (ace-jump-mode-enable-mark-sync)
    :bind
    ;; ("C-x SPC" . ace-jump-mode-pop-mark)
    ("C-c j" . ace-jump-word-mode)
    ("C-c k" . ace-jump-char-mode)
    ("C-c l" . ace-jump-line-mode)
    :init
    (ace-jump-mode 1)
    )

  (all-the-icons-completion-mode t) ;; TODO This is a quick fix, remove this
#+end_src

*** TODO Workspaces

#+begin_src emacs-lisp
  (use-package persp-mode
    :ensure t
    :commands persp-switch-to-buffer
    :init
    (setq persp-autokill-buffer-on-remove 'kill-weak
          persp-reset-windows-on-nil-window-conf nil
          persp-nil-hidden t
          persp-auto-save-fname "autosave"
          persp-save-dir (concat user-emacs-directory "workspaces/")
          persp-set-last-persp-for-new-frames t
          persp-switch-to-added-buffer nil
          persp-kill-foreign-buffer-behaviour 'kill
          persp-remove-buffers-from-nil-persp-behaviour nil
          persp-auto-resume-time -1 ; Don't auto-load on startup
          persp-auto-save-opt (if noninteractive 0 1) ; auto-save on kill
          persp-keymap-prefix (kbd "C-c w")
          )

    ;; (add-hook 'tab-bar-mode-hook
    ;; (defun +workspaces-set-up-tab-bar-integration-h ()
    ;;   (add-hook 'persp-before-deactivate-functions #'+workspaces-save-tab-bar-data-h)
    ;;   (add-hook 'persp-activated-functions #'+workspaces-load-tab-bar-data-h)
    ;;   ;; Load and save configurations for tab-bar.
    ;;   (add-hook 'persp-before-save-state-to-file-functions #'+workspaces-save-tab-bar-data-to-file-h)
    ;; (+workspaces-load-tab-bar-data-from-file-h)))

    ;; (define-key persp-key-map (kbd ...) ...)
    (persp-mode t)
    )

  (use-package persp-mode-projectile-bridge
    :straight
      (:type git :host github :repo "Bad-ptr/persp-mode-projectile-bridge.el")
    :ensure t
    :after persp-mode
    :init
    (with-eval-after-load "persp-mode-projectile-bridge-autoloads"
      (add-hook 'persp-mode-projectile-bridge-mode-hook
                #'(lambda ()
                    (if persp-mode-projectile-bridge-mode
                        (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
                      (persp-mode-projectile-bridge-kill-perspectives))))
      (add-hook 'after-init-hook
                #'(lambda ()
                    (persp-mode-projectile-bridge-mode 1))
                t))
    )
#+end_src


# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
# End:
