#+title: Wavemacs Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el :mkdirp yes

* Wavemacs Configuration
Let's try to configure emacs using org mode.

** TODO Dependencies
- Ripgrep(counsult default grep)
- fd
- Cmake (for vterm)

** First things first, package management
I will use *straight.el* as package maneger with *use-package* integration so I am disabling *package.el* in *early-init.el*

*** Disable package.el
#+begin_src emacs-lisp :tangle ./.emacs.d/early-init.el

(setq package-enable-at-startup nil)

#+end_src

*** Here i modify module load path to include wavemacs modules
Normally i would seperate the configuration into multiple files or packages
But since I decided to write this in org-mode I am going to try to
tangle all of the configuration into 'init.el'

#+begin_src emacs-lisp :tangle no

  ;; (let ((default-directory  (concat user-emacs-directory "waveemacs")))
  ;;   (normal-top-level-add-to-load-path '("."))
  ;;   (normal-top-level-add-subdirs-to-load-path))
  ;; (require 'wavemacs)

  ;; (defun wavemacs-load-file (fname)
  ;;   (load-file (concat user-emacs-directory "wavemacs/" fname ".el")))

  ;; (dolist
  ;;     (f '("packages"
  ;;          "completion"
  ;;          "ui"
  ;;          "options"))
  ;;   (wavemacs-load-file f))

  ;; (provide 'wavemacs)

#+end_src

*** Continuing with package manager configuration

#+begin_src emacs-lisp

  ;;(setq straight-recipes-emacsmirror-use-mirror 'nil)
  ;; Default repo list (org-elpa melpa gnu-elpa-mirror el-get emacsmirror)
  ;;(setq straight-recipe-repositories
  ;;      '("org-elpa" "melpa" "gnu-elpa-mirror" "el-get"))
  (setq straight-recipe-repositories 'nil)

  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

** Kind of better-defaults

#+begin_src emacs-lisp

  ;; Set Options
  ;;;; Disable annoying ring-bell when backspace key is pressed in certain situations
  ;;(setq ring-bell-function 'ignore)
  (setq visible-bell t) ;; why not???

  ;;;; y or n promt
  (setq use-short-answers t)

  ;;;; Disable scrollbar and toolbar
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room(scroll-bar-mode -1)

  ;;;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;;;; Longer whitespace, otherwise syntax highlighting is limited to default column
  ;;(setq whitespace-line-column 1000)

  ;; Allow for minibuffer-ception. Sometimes we need another minibuffer command
  ;; while we're in the minibuffer.
  (setq enable-recursive-minibuffers t)

  ;; Show current key-sequence in minibuffer ala 'set showcmd' in vim. Any
  ;; feedback after typing is better UX than no feedback at all.
  (setq echo-keystrokes 0.02)

  ;; Expand the minibuffer to fit multi-line text displayed in the echo-area. This
  ;; doesn't look too great with direnv, however...
  (setq resize-mini-windows 'grow-only)

  ;; A simple frame title
  (setq frame-title-format '("%b – WaveEmacs")
        icon-title-format frame-title-format)

  ;;;; Enable soft-wrap
  (global-visual-line-mode 1)
  (setq column-number-mode t)
  (setq display-line-numbers-type 'relative)

  ;;;; Maintain a list of recent files opened
  (recentf-mode 1)
  (setq recentf-max-saved-items 50)

  ;;;; Move all the backup files to specific cache directory
  ;;;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;;;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR
  (setq user-cache-directory (concat user-emacs-directory "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
    url-history-file (expand-file-name "url/history" user-cache-directory)
    auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
    projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

  ;;;; Automatically add ending brackets and braces
  (electric-pair-mode 1)

  ;;;; Make sure tab-width is 4 and not 8
  (setq-default tab-width 4)

  ;;;; Highlight matching brackets and braces
  (show-paren-mode 1)

  ;;; Line numbers
  ;; Explicitly define a width to reduce the cost of on-the-fly computation
  (setq-default display-line-numbers-width 3)

  ;; Show absolute line numbers for narrowed regions to make it easier to tell the
  ;; buffer is narrowed, and where you are, exactly.
  (setq-default display-line-numbers-widen t)

  (setq-default indent-tabs-mode nil)
  (setq select-enable-clipboard t
    select-enable-primary t
    save-interprogram-paste-before-kill t
    apropos-do-all t
    mouse-yank-at-point t
    save-place-file (concat user-emacs-directory "places")
    backup-directory-alist `(("." . ,(concat user-emacs-directory"backups")))
    uniquify-buffer-name-style 'forward
    image-animate-loop t)

  ;; Ediff
  ;; Don't create new frames for ediff session
  (advice-add 'ediff-window-display-p :override #'ignore)

  ;; Restor window configuration after ediff session
  (defvar ediff-last-windows nil
    "Last ediff window configuration.")

  (defun ediff-restore-windows ()
    "Restore window configuration to `ediff-last-windows'."
    (set-window-configuration ediff-last-windows)
    (remove-hook 'ediff-after-quit-hook-internal
                 'ediff-restore-windows))

  (defadvice ediff-buffers (around ediff-restore-windows activate)
    (setq ediff-last-windows (current-window-configuration))
    (add-hook 'ediff-after-quit-hook-internal 'ediff-restore-windows)
    ad-do-it)
  ;;(ediff)

#+end_src

** UI

*** Theme
Doom themes are great!

#+begin_src emacs-lisp
  (use-package doom-themes
  :ensure t
  :init
  (load-theme 'doom-sourcerer t))

  (use-package heaven-and-hell
    :ensure t
    :init
    (setq heaven-and-hell-theme-type 'dark)
    (setq heaven-and-hell-themes
      '((light . doom-nord-light)
        (dark . doom-sourcerer)))
    :hook (after-init . heaven-and-hell-init-hook)
    :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
       ("<f6>" . heaven-and-hell-toggle-theme)))

#+end_src

*** Modline
Also doom modline!

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

*** TODO Dashboard
- Customize list of actions for dashboar

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (dashboard-setup-startup-hook))
#+end_src

*** Tabs

#+begin_src emacs-lisp
    (use-package centaur-tabs
      :ensure t
      :init
      (centaur-tabs-mode t)
      (setq centaur-tabs-enable-key-bindings t)
  ;;    :config
      (setq centaur-tabs-style "bar"
            centaur-tabs-height 32
            centaur-tabs-set-icons t
            centaur-tabs-show-new-tab-button t
            centaur-tabs-set-modified-marker t
            centaur-tabs-show-navigation-buttons t
            centaur-tabs-set-bar 'under
            centaur-tabs-show-count nil
            ;; centaur-tabs-label-fixed-length 15
            ;; centaur-tabs-gray-out-icons 'buffer
            ;; centaur-tabs-plain-icons t
            x-underline-at-descent-line t
            centaur-tabs-left-edge-margin nil)
      (centaur-tabs-change-fonts (face-attribute 'default :font) 110)
      (centaur-tabs-headline-match)
      ;; (centaur-tabs-enable-buffer-alphabetical-reordering)
      ;; (setq centaur-tabs-adjust-buffer-order t)
      ;; (centaur-tabs-mode t)
      (setq uniquify-separator "/")
      (setq uniquify-buffer-name-style 'forward)
      (defun centaur-tabs-buffer-groups ()
        "`centaur-tabs-buffer-groups' control buffers' group rules.

    Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
    All buffer name start with * will group to \"Emacs\".
    Other buffer group by `centaur-tabs-get-group-name' with project name."
        (list
         (cond
          ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
          ;; "Remote")
          ((or (string-equal "*" (substring (buffer-name) 0 1))
               (memq major-mode '(magit-process-mode
                                  magit-status-mode
                                  magit-diff-mode
                                  magit-log-mode
                                  magit-file-mode
                                  magit-blob-mode
                                  magit-blame-mode
                                  )))
           "Emacs")
          ((derived-mode-p 'prog-mode)
           "Editing")
          ((derived-mode-p 'dired-mode)
           "Dired")
          ((memq major-mode '(helpful-mode
                              help-mode))
           "Help")
          ((memq major-mode '(org-mode
                              org-agenda-clockreport-mode
                              org-src-mode
                              org-agenda-mode
                              org-beamer-mode
                              org-indent-mode
                              org-bullets-mode
                              org-cdlatex-mode
                              org-agenda-log-mode
                              diary-mode))
           "OrgMode")
          (t
           (centaur-tabs-get-group-name (current-buffer))))))
      :hook
      (dashboard-mode . centaur-tabs-local-mode)
      (term-mode . centaur-tabs-local-mode)
      (calendar-mode . centaur-tabs-local-mode)
      (org-agenda-mode . centaur-tabs-local-mode)
      :bind
      ("C-<prior>" . centaur-tabs-backward)
      ("C-<next>" . centaur-tabs-forward)
      ("C-S-<prior>" . centaur-tabs-move-current-tab-to-left)
      ("C-S-<next>" . centaur-tabs-move-current-tab-to-right))
#+end_src

*** Treemacs
Just incase...

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay        0.5
          treemacs-directory-name-transformer      #'identity
          treemacs-display-in-side-window          t
          treemacs-eldoc-display                   'simple
          treemacs-file-event-delay                2000
          treemacs-file-extension-regex            treemacs-last-period-regex-value
          treemacs-file-follow-delay               0.2
          treemacs-file-name-transformer           #'identity
          treemacs-follow-after-init               t
          treemacs-expand-after-init               t
          treemacs-find-workspace-method           'find-for-file-or-pick-first
          treemacs-git-command-pipe                ""
          treemacs-goto-tag-strategy               'refetch-index
          treemacs-header-scroll-indicators        '(nil . "^^^^^^")
          treemacs-hide-dot-git-directory          t
          treemacs-indentation                     2
          treemacs-indentation-string              " "
          treemacs-is-never-other-window           nil
          treemacs-max-git-entries                 5000
          treemacs-missing-project-action          'ask
          treemacs-move-forward-on-expand          nil
          treemacs-no-png-images                   nil
          treemacs-no-delete-other-windows         t
          treemacs-project-follow-cleanup          nil
          treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                        'left
          treemacs-read-string-input               'from-child-frame
          treemacs-recenter-distance               0.1
          treemacs-recenter-after-file-follow      nil
          treemacs-recenter-after-tag-follow       nil
          treemacs-recenter-after-project-jump     'always
          treemacs-recenter-after-project-expand   'on-distance
          treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
          treemacs-project-follow-into-home        nil
          treemacs-show-cursor                     nil
          treemacs-show-hidden-files               t
          treemacs-silent-filewatch                nil
          treemacs-silent-refresh                  nil
          treemacs-sorting                         'alphabetic-asc
          treemacs-select-when-already-in-treemacs 'move-back
          treemacs-space-between-root-nodes        t
          treemacs-tag-follow-cleanup              t
          treemacs-tag-follow-delay                1.5
          treemacs-text-scale                      nil
          treemacs-user-mode-line-format           nil
          treemacs-user-header-line-format         nil
          treemacs-wide-toggle-width               70
          treemacs-width                           35
          treemacs-width-increment                 1
          treemacs-width-is-initially-locked       t
          treemacs-workspace-switch-cleanup        nil)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode 'always)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t))

    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple)))

    (treemacs-hide-gitignored-files-mode nil))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-icons-dired
  :hook (dired-mode . treemacs-icons-dired-enable-once)
  :ensure t)

(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)

(use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
  :after (treemacs persp-mode) ;;or perspective vs. persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))

(use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
  :after (treemacs)
  :ensure t
  :config (treemacs-set-scope-type 'Tabs))
#+end_src

*** Other UI Releated Things

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :commands (all-the-icons-octicon
               all-the-icons-faicon
               all-the-icons-fileicon
               all-the-icons-wicon
               all-the-icons-material
               all-the-icons-alltheicon)
    :init
    (unless
        ;; A quick way to check if the fonts are installed
        ;; Another aproach would be to use 'memoize.el'
        (and (file-exists-p (expand-file-name "~/.local/share/fonts/all-the-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/file-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/fontawesome.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/material-design-icons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/octicons.ttf"))
             (file-exists-p (expand-file-name "~/.local/share/fonts/weathericons.ttf")))
      (all-the-icons-install-fonts t)))


  (use-package all-the-icons-completion
    :ensure t
    :after all-the-icons
    :init
    (all-the-icons-completion-mode t))

  ;; Many major modes do no highlighting of number literals, so we do it for them
  (use-package highlight-numbers
    :hook ((prog-mode conf-mode) . highlight-numbers-mode)
    :config (setq highlight-numbers-generic-regexp "\\_<[[:digit:]]+\\(?:\\.[0-9]*\\)?\\_>"))

  (use-package hl-line
    ;; Highlights the current line
    :init
    (defvar global-hl-line-modes
      '(prog-mode
        text-mode
        conf-mode
        special-mode
        org-agenda-mode
        dired-mode)
      "What modes to enable `hl-line-mode' in.")
    (global-hl-line-mode))

  (use-package hl-todo)

#+end_src

** Completion
Okay, let's go with Vertico/Consult way...

*** TODO Vertico
#+begin_src emacs-lisp

    (use-package vertico
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :init
      (vertico-mode)

      ;; Different scroll margin
      ;; (setq vertico-scroll-margin 0)

      ;; Show more candidates
      (setq vertico-count 20)

      ;; Grow and shrink the Vertico minibuffer
      (setq vertico-resize t)

      ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
      (setq vertico-cycle t))

      ;; (use-package vertico-posframe
      ;;   :hook (vertico-mode . vertico-posframe-mode))

    (use-package vertico-multiform
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico
      :init

      (setq vertico-multiform-commands
        '(
          ;; (consult-line
          ;;  posframe
          ;;  (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
          ;;  (vertico-posframe-border-width . 10)
          ;;  ;; NOTE: This is useful when emacs is used in both in X and
          ;;  ;; terminal, for posframe do not work well in terminal, so
          ;;  ;; vertico-buffer-mode will be used as fallback at the
          ;;  ;; moment.
          ;; (vertico-posframe-fallback-mode . vertico-buffer-mode)
          (execute-extended-command indexed reverse)
          ;; (t buffer (vertico-buffer-display-action . (display-buffer-same-window)) )
          (t buffer)
          ))

      ;; Enable vertico-multiform
         (vertico-multiform-mode t))

    (use-package vertico-indexed
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico)

    (use-package vertico-quick
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico)

    (use-package vertico-reverse
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico)

    ;; Configure directory extension.
    (use-package vertico-directory
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico
      :ensure t
      ;; More convenient directory navigation commands
      :bind (:map vertico-map
                  ("RET" . vertico-directory-enter)
                  ("DEL" . vertico-directory-delete-char)
                  ("M-DEL" . vertico-directory-delete-word))
      ;; Tidy shadowed file names
      :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

    (use-package vertico-mouse
      :straight
      (:type git :host github :repo "emacs-straight/vertico" :files ("*.el" "extensions/*.el"))
      :after vertico
      :init
      (vertico-mouse-mode)
      ;; vertico-mouse-face intherits from face 'hightlight'
      ;; Some how the default foregroung and backgroung colors are all white for 'highlight' face
      ;; which causes unreadable line when you highlight the completion with mouse
      (set-face-foreground 'vertico-mouse "navy"))
  ;;    :init (vertico-mouse-mode))


#+end_src

*** Consult

#+begin_src emacs-lisp

  (use-package consult
    :ensure t
    :bind (
           ;;:map vertico-map
           ("C-x b" . consult-buffer)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s i" . consult-imenu)
           ("M-s I" . consult-imenu-multi)
           ("M-s f" . consult-focus-lines)
           ("M-s K" . consult-keep-lines)

           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-ripgrep)

           ("M-y" . consult-yank-pop)                ;; orig. yank-pop

           ;; Custom M-# bindings for fast register access
           ("M-\"" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-\"" . consult-register)

           ;;("M-g e" . consult-compile-error)
           ;;("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g M" . consult-global-mark)

           ;; Help Commands
           ("C-h I" . consult-info)
           ([remap Info-search] . consult-info)
           ;;("C-h S-m" . consult-man) ;; TODO

           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x C-d" . consult-dir)
           ;;("C-x C-j" . consult-dir-jump-file) TODO
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ("C-x K" . consult-kmacro)
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           )
    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    )

  (use-package consult-dir
    :ensure t)

  (use-package consult-flycheck)

  (use-package consult-lsp
    :ensure t
    :bind
    (("C-c C-\\" . 'consult-lsp-diagnostics)))

#+end_src

*** TODO Childframe Support for Completion at Point

#+begin_src emacs-lisp
  ;; Enable Corfu completion UI
  ;; See the Corfu README for more configuration tips.
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode))

  (use-package kind-icon
    :ensure t
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

  ;; Add extensions
  (use-package cape
    :ensure t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("M-p p" . completion-at-point) ;; capf
           ("M-p t" . complete-tag)        ;; etags
           ("M-p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("M-p h" . cape-history)
           ("M-p f" . cape-file)
           ("M-p k" . cape-keyword)
           ("M-p s" . cape-symbol)
           ("M-p a" . cape-abbrev)
           ("M-p i" . cape-ispell)
           ("M-p l" . cape-line)
           ("M-p w" . cape-dict)
           ("M-p \\" . cape-tex)
           ("M-p _" . cape-tex)
           ("M-p ^" . cape-tex)
           ("M-p &" . cape-sgml)
           ("M-p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-history)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    (add-to-list 'completion-at-point-functions #'cape-symbol)
    (add-to-list 'completion-at-point-functions #'cape-line)
  )
#+end_src

*** Embark

#+begin_src emacs-lisp
  ;; Configure Embark
  (use-package embark
    :ensure t
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator)

#+end_src

*** Orderless
Completion styles for consult

#+begin_src emacs-lisp
  (use-package orderless
              :config
              (defun +orderless--consult-suffix ()
              "Regexp which matches the end of string with Consult tofu support."
              (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
                  (format "[%c-%c]*$"
                          consult--tofu-char
                          (+ consult--tofu-char consult--tofu-range -1))
                "$"))

              ;; Recognizes the following patterns:
              ;; * .ext (file extension)
              ;; * regexp$ (regexp matching at end)
              (defun +orderless-consult-dispatch (word _index _total)
                (cond
                 ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
                 ((string-suffix-p "$" word)
                  `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
               ;; File extensions
                 ((and (or minibuffer-completing-file-name
                           (derived-mode-p 'eshell-mode))
                       (string-match-p "\\`\\.." word))
                  `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

              ;; Define orderless style with initialism by default
              (orderless-define-completion-style +orderless-with-initialism
                (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

              (setq completion-styles '(orderless basic)
                    completion-category-defaults nil
                  ;;; Enable partial-completion for files.
                  ;;; Either give orderless precedence or partial-completion.
                  ;;; Note that completion-category-overrides is not really an override,
                  ;;; but rather prepended to the default completion-styles.
                    ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
                    completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                                    ;; enable initialism by default for symbols
                                                    (command (styles +orderless-with-initialism))
                                                    (variable (styles +orderless-with-initialism))
                                                    (symbol (styles +orderless-with-initialism)))
                  orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
                  orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                                    #'orderless-affix-dispatch))
              (defun fix-dollar (args)
                (if (string-suffix-p "$" (car args))
                    (list (format "%s[%c-%c]*$"
                                  (substring (car args) 0 -1)
                                  consult--tofu-char
                                (+ consult--tofu-char consult--tofu-range -1)))
                  args))
              (advice-add #'orderless-regexp :filter-args #'fix-dollar)
              (advice-add #'prescient-regexp-regexp :filter-args #'fix-dollar)
              )
#+end_src

*** Marginalia
Enable descriptions/annotations for completion minibuffer

#+begin_src emacs-lisp
  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

#+end_src

** TODO Coding

*** Best Git FE Ever!

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    (magit-diff-refine-hunk t))
    ;; :init
    ;; (setq magit-diff-refine-hunk t))
#+end_src

*** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    (setq projectile-project-search-path '(("~/projects/" . 1) "~/work/" ("~/stuff" . 1)))
    (setq projectile-switch-project-action #'projectile-dired)

    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

  (use-package rg
    :ensure t
    :init
    (rg-enable-default-bindings))

  (use-package ag
    :ensure t)

#+end_src

*** Tree-sitter

#+begin_src emacs-lisp
   (use-package tree-sitter
     :defer t
     :hook
     ((css-mode
       js-mode
       json-mode
       php-mode
       ruby-mode
       rust-mode
       python-mode
       sh-mode
       terraform-mode
       typescript-mode
       yaml-mode) . tree-sitter-mode-enable)

     :preface
     (defun tree-sitter-mode-enable ()
       (tree-sitter-mode t)))

   (use-package tree-sitter-langs
     :hook
     (tree-sitter-after-on . tree-sitter-hl-mode))
#+end_src

*** Lsp

#+begin_src emacs-lisp

    (use-package lsp-mode
      :ensure t
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
             ;; (python-mode . lsp)
             ;; (rust-mode . lsp)
             ;; (js-mode . lsp)
             ;; (sh-mode . lsp)
             (prog-mode . lsp)
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands
      lsp
      lsp-deferred
      lsp-format-buffer-on-save-mode
      lsp-organize-imports-on-save-mode

      :custom
      (lsp-completion-provider :capf)
      (lsp-completion-show-detail t)
      (lsp-completion-show-kind t)
      (lsp-eldoc-enable-hover t)
      (lsp-eldoc-render-all nil)
      (lsp-enable-file-watchers t)
      (lsp-enable-imenu t)
      (lsp-enable-symbol-highlighting t)
      (lsp-enable-xref t)
      (lsp-headerline-breadcrumb-enable t)
      (lsp-idle-delay 0.4)
      (lsp-keymap-prefix "M-;")
      (lsp-lens-enable t)
      (lsp-modeline-diagnostics-enable t)
      (lsp-semantic-tokens-apply-modifiers t)
      (lsp-semantic-tokens-enable t)
      (lsp-semantic-tokens-warn-on-missing-face nil)
      (lsp-signature-auto-activate t)
      (lsp-signature-render-documentation t)
      (lsp-keymap-prefix "M-L")
      (lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      :bind
      (:map lsp-mode-map
            ("M-RET" . lsp-execute-code-action))
      :init
      (lsp-headerline-breadcrumb-mode))

    (use-package lsp-ui
      :defer t
      :bind
      (:map lsp-ui-mode-map
            ("M-L C-d" . 'lsp-ui-doc-glance)
            ("M-L D" . 'lsp-ui-doc-show)
            ("M-L R" . 'lsp-ui-peek-find-references)
            ("M-L J" . 'lsp-ui-peek-find-definitions))

      :custom
      (lsp-ui-doc-alignment 'window)
      (lsp-ui-doc-delay 0.2)
      (lsp-ui-doc-enable t)
      (lsp-ui-doc-header nil)
      (lsp-ui-doc-include-signature t)
      (lsp-ui-doc-max-height 45)
      (lsp-ui-doc-position 'at-point)
      (lsp-ui-doc-show-with-cursor nil)
      (lsp-ui-doc-show-with-mouse nil)
      (lsp-ui-doc-use-webkit nil)
      (lsp-ui-peek-always-show nil)
      (lsp-ui-sideline-enable t)
      (lsp-ui-sideline-show-code-actions t)
      (lsp-ui-sideline-show-diagnostics t)
      (lsp-ui-sideline-show-hover nil))

  (use-package lsp-treemacs
    :after lsp)


  (use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
         ("<tab>" . company-complete-selection))
        (:map lsp-mode-map
         ("<tab>" . company-indent-or-complete-common))
        :custom
        (company-minimum-prefix-length 1)
        (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))


  ;; The path to lsp-mode needs to be added to load-path as well as the
  ;; path to the `clients' subdirectory.
  ;;(add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
  ;;(add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))

#+end_src

*** TODO DAP

#+begin_src emacs-lisp
  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    :custom
    (dap-default-terminal-kind "integrated") ;; Make sure that terminal programs open a term for I/O in an Emacs buffer
    (dap-cpptools-extension-version "1.5.1")
    (lsp-enable-dap-auto-configure t)
    (dap-auto0configure-mode t)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    ;; TODO Setup dap mode for languages
    ;; :config
    ;; ;; Set up Node debugging
    ;; ;; (require 'dap-node)
    ;; ;; (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; ;; Bind `C-c l d` to `dap-hydra` for easy access
    ;; (general-define-key
    ;;   :keymaps 'lsp-mode-map
    ;;   :prefix lsp-keymap-prefix
    ;; "d" '(dap-hydra t :wk "debugger")))
    )

  (use-package dap-gdb-lldb
    :straight
    (:type git :host github :repo "emacs-lsp/dap-mode" :files ("*.el" "extensions/*.el"))
    :config
    ;; Add a template specific for debugging Rust programs.
    ;; It is used for new projects, where I can M-x dap-edit-debug-template
    (dap-register-debug-template "Rust::CppTools Run Configuration"
                                 (list :type "cppdbg"
                                       :request "launch"
                                       :name "Rust::Run"
                                       :MIMode "gdb"
                                       :miDebuggerPath "rust-gdb"
                                       :environment []
                                       :program "${workspaceFolder}/target/debug/hello / replace with binary"
                                       :cwd "${workspaceFolder}"
                                       :console "external"
                                       :dap-compilation "cargo build"
                                       :dap-compilation-dir "${workspaceFolder}"))
    (dap-register-debug-template "Rust::GDB Run Configuration"
                                 (list :type "gdb"
                                       :request "launch"
                                       :name "GDB::Run"
                                       :gdbpath "rust-gdb"
                                       :target nil
                                       :cwd nil))

    )

#+end_src

*** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :hook (emacs-startup . yas-reload-all)

    :config
    (yas-global-mode))

  (use-package yasnippet-snippets
    :after yasnippet)
    ;; :config
    ;; (let ((skip-file (expand-file-name "prog-mode/.yas-skip"
    ;;                                    yasnippet-snippets-dir)))
    ;;   (when (not (file-exists-p skip-file)))))
#+end_src

*** TODO Rest Client

#+begin_src emacs-lisp

  (use-package restclient)
  (use-package ob-restclient)
  (use-package company-restclient)

#+end_src

*** Languages

**** TODO Lisp

**** TODO Rust
#+begin_src emacs-lisp

  (defun wave-rust-mode-setup ()
      (setq-local rust-format-on-save t))

  (use-package rust-mode
    :ensure t
    :mode "\\.rs\\'"
    :interpreter "rust"
    :commands rust-mode
    :bind
    (:map rust-mode-map
          ("RET" . newline-and-indent))

    :hook
    (rust-mode . wave-rust-mode-setup))

  (defun wave-lsp-rust-mode-setup ()
    (lsp-format-buffer-on-save-mode t)
    (lsp-organize-imports-on-save-mode t)
    (lsp-deferred))

  (use-package lsp-rust
    :straight lsp-mode

    :hook
    (rust-mode . wave-lsp-rust-mode-setup))

  (use-package cargo
    :hook (rust-mode . cargo-minor-mode))

  (use-package flycheck-rust
    :after rust-mode
    :hook (flycheck-mode . flycheck-rust-setup))

  (use-package rust-playground
    :defer t)
#+end_src

**** TODO TOML

**** TODO Python

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    (python-shell-interpreter "python")
    (dap-python-executable "python")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred))))

#+end_src

**** TODO Java

#+begin_src emacs-lisp
    (use-package lsp-java
      :ensure t
      :custom
      (lsp-java-configuration-maven-user-settings "/home/user/etc/settings.xml") ;; TODO Modify the path
      :hook (java-mode-hook . lsp-deferred))
  ;;    :config (add-hook 'java-mode-hook 'lsp))
#+end_src

**** TODO JS/TS

**** TODO Json

#+begin_src emacs-lisp

  (use-package json-mode
    :ensure t
    :mode
    "\\.json\\'"
    :commands
    json-mode)
  ;;(use-package json-snatcher)

#+end_src

**** TODO Web Mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode
    "\\.html\\'"
    "\\.html.erb\\'"
    "\\.tpl\\'"

    :bind
    (:map web-mode-map
          ("C-j" . newline-and-indent))

    :hook
    (web-mode . siren-web-mode-setup)

    :custom
    (web-mode-code-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-markup-indent-offset 2)
    (web-mode-attr-indent-offset 2)
    (web-mode-sql-indent-offset 2))
#+end_src

** TODO Org-Mode

#+begin_src emacs-lisp

  ;; Tell straight about org-mode
  (straight-use-package '(org :type built-in))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (use-package visual-fill-column
    :custom
    (visual-fill-column-width 200)
    (visual-fill-column-center-text t)
    :hook (org-mode . visual-fill-column-mode))

  (defvar +org-capture-personal-file "~/org/personal.org"
    "Default target for personal todo's and note entries.")

  (defvar +org-capture-projects-file "~/org/projects.org"
    "Default target for project related todo's and notes.")

  (defvar +org-capture-work-file "~/org/work.org"
    "Default target for work related todo's and notes.")

  (defvar +org-capture-journal-file "~/org/journal.org"
    "Default target for storing timestamped journal entries.")

  (defvar +org-capture-misc-file "~/org/miscellaneous.org"
    "Default target for storing all the rest.")

  (defun wave/org-capture-heading (type)
  "Get heading for project capture template
  Returns '[Inbox/Unclassified]' if not in project"
  (if (projectile-project-name)
      (concat "[" (projectile-project-name) "/" type "]")
    (concat "[Inbox/" type "]")))

  (defun wave/org-capture-fpath (fname)
    "Get absolute path for capture template file"
    (expand-file-name fname org-directory))

  (setq +org-capture-all-files (list +org-capture-personal-file
                                     +org-capture-work-file
                                     +org-capture-journal-file
                                     +org-capture-misc-file))

  (use-package org
    :ensure org-plus-contrib
    :bind
    ("C-c n" . org-capture)
    :custom
    (org-directory "~/org/")
    (org-agenda-files +org-capture-all-files)
    (org-agenda-start-with-log-mode t)
    (org-log-done 'time)
    (org-log-into-drawer t)

    ;; From Doom Emacs
    ;; https://github.com/doomemacs/doomemacs/blob/4e105a95af9c4c7e86471e5566eb7a5ff776ec92/modules/lang/org/config.el#L152
    (org-todo-keywords
     '((sequence
        "TODO(t)"  ; A task that needs doing & is ready to do
        "PROJ(p)"  ; A project, which usually contains other tasks
        "LOOP(r)"  ; A recurring task
        "STRT(s)"  ; A task that is in progress
        "WAIT(w)"  ; Something external is holding up this task
        "HOLD(h)"  ; This task is paused/on hold because of me
        "IDEA(i)"  ; An unconfirmed and unapproved task or notion
        "|"
        "DONE(d)"  ; Task successfully completed
        "KILL(k)") ; Task was cancelled, aborted or is no longer applicable
       (sequence
        "[ ](T)"   ; A task that needs doing
        "[-](S)"   ; Task is in progress
        "[?](W)"   ; Task is being held up or paused
        "|"
        "[X](D)")  ; Task was completed
       (sequence
        "|"
        "OKAY(o)"
        "YES(y)"
        "NO(n)"))
     org-todo-keyword-faces
     '(("[-]"  . +org-todo-active)
       ("STRT" . +org-todo-active)
       ("[?]"  . +org-todo-onhold)
       ("WAIT" . +org-todo-onhold)
       ("HOLD" . +org-todo-onhold)
       ("PROJ" . +org-todo-project)
       ("NO"   . +org-todo-cancel)
       ("KILL" . +org-todo-cancel)))
    ;; https://github.com/doomemacs/doomemacs/blob/4e105a95af9c4c7e86471e5566eb7a5ff776ec92/modules/lang/org/config.el#L384
    (org-capture-templates
    '(("t" "Personal Todo" entry
       (file+headline +org-capture-personal-file "[Inbox/Tasks]")
       "* TODO [ ] %?\n%i\n%a" :prepend t)
      ("n" "Personal notes" entry
       (file+headline +org-capture-personal-file "[Inbox/Notes]")
       "* %u %?\n%i\n%a" :prepend t)
      ("j" "Journal" entry
       (file+olp+datetree +org-capture-journal-file)
       "* %U %?\n%i\n%a" :prepend t)
      ("m" "Miscellaneous" entry
       (file+olp+datetree +org-capture-misc-file)
       "* %U %?\n%i\n%a" :prepend t)

      ("w" "Templates for work")
      ("wt" "Work-Todo" entry
       (file+function +org-capture-work-file (lambda () (wave/org-capture-heading "Tasks")))
       "* TODO %?\n%i\n%a" :prepend t)
      ("wn" "Work-Notes" entry
       (file+function +org-capture-work-file (lambda () (wave/org-capture-heading "Notes")))
       "* %U %?\n%i\n%a" :prepend t)

      ("p" "Templates for projects")
      ("pt" "Project-Todo" entry
       (file+function +org-capture-projects-file (lambda () (wave/org-capture-heading "Tasks")))
       "* TODO %?\n%i\n%a" :prepend t)
      ("pn" "Project-Notes" entry
       (file+function +org-capture-projects-file (lambda () (wave/org-capture-heading "Notes")))
       "* %U %?\n%i\n%a" :prepend t)))

    :config
    ;;(setq org-directory "~/org/")
    ;; Ensure thath all org files exist to avoid the question:
    ;;"non-existent agenda file ~/file.org. [R]emove from list or [A]bort?"
    (progn
      (unless (f-directory-p org-directory) (make-directory org-directory))
      (dolist (fname +org-capture-all-files)
        (let ((file (expand-file-name fname org-directory)))
          (unless (file-exists-p file) (make-empty-file (expand-file-name fname org-directory))))))

    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Source Code Pro" :weight 'bold :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (eshell . t)
       (shell . t)
       (java . t)
       (lua .t)
       (js . t)
       (sql . t)
       (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

    ;; Source Templates
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    )


#+end_src
** Terminal

*** TODO VTerm
Needs some more configuration. zsh escape codes, tmux ecc...
#+begin_src emacs-lisp
      ;; TODO set this variable to avoid compile module prompt
      ;;(setq vterm-always-compile-module t)
      (use-package vterm
        :ensure t
        :init
        (setq vterm-shell 'eshell))
#+end_src

*** TODO Eshell

** TODO Tramp
#+begin_src emacs-lisp
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+end_src


** Miscellaneous

Various stuff that doesn't belong to a spesific place...

#+begin_src emacs-lisp

  ;; Show keybindings after delay
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  ;; Some times it's useful to see the list of commands executed
  (use-package command-log-mode)

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Improved highlightning
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  ;; Better help docs
  (use-package helpful
    :ensure t
    :init
    ;; Note that the built-in `describe-function' includes both functions
    ;; and macros. `helpful-function' is functions only, so we provide
    ;; `helpful-callable' as a drop-in replacement.
    (global-set-key (kbd "C-h f") #'helpful-callable)

    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-h x") #'helpful-command)
    ;; Lookup the current symbol at point. C-c C-d is a common keybinding
    ;; for this in lisp modes.
    (global-set-key (kbd "C-h .") #'helpful-at-point)

    ;; Look up *F*unctions (excludes macros).
    ;;
    ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
    ;; already links to the manual, if a function is referenced there.
    (global-set-key (kbd "C-h F") #'helpful-function))

  (use-package ace-jump-mode
    :config
    ;;
    ;; enable a more powerful jump back function from ace jump mode
    ;;
    ;; (ace-jump-mode-pop-mark)
    (ace-jump-mode-enable-mark-sync)
    :bind
    ;; ("C-x SPC" . ace-jump-mode-pop-mark)
    ("C-c j" . ace-jump-word-mode)
    ("C-c k" . ace-jump-char-mode)
    ("C-c l" . ace-jump-line-mode)
    :init
    ;;(ace-jump-mode 1)
    )

  (all-the-icons-completion-mode t) ;; TODO This is a quick fix, remove this

  ;; Let's try dirvish instead of ranger this time!
  (use-package dirvish)


#+end_src

*** TODO Workspaces

#+begin_src emacs-lisp
  (use-package persp-mode
    :ensure t
    :commands persp-switch-to-buffer
    :init
    (setq persp-autokill-buffer-on-remove 'kill-weak
          persp-reset-windows-on-nil-window-conf nil
          persp-nil-hidden t
          persp-auto-save-fname "autosave"
          persp-save-dir (concat user-emacs-directory "workspaces/")
          persp-set-last-persp-for-new-frames t
          persp-switch-to-added-buffer nil
          persp-kill-foreign-buffer-behaviour 'kill
          persp-remove-buffers-from-nil-persp-behaviour nil
          persp-auto-resume-time -1 ; Don't auto-load on startup
          persp-auto-save-opt (if noninteractive 0 1) ; auto-save on kill
          persp-keymap-prefix (kbd "C-c w")
          )

    ;; (add-hook 'tab-bar-mode-hook
    ;; (defun +workspaces-set-up-tab-bar-integration-h ()
    ;;   (add-hook 'persp-before-deactivate-functions #'+workspaces-save-tab-bar-data-h)
    ;;   (add-hook 'persp-activated-functions #'+workspaces-load-tab-bar-data-h)
    ;;   ;; Load and save configurations for tab-bar.
    ;;   (add-hook 'persp-before-save-state-to-file-functions #'+workspaces-save-tab-bar-data-to-file-h)
    ;; (+workspaces-load-tab-bar-data-from-file-h)))

    ;; (define-key persp-key-map (kbd ...) ...)
    (persp-mode t)
    )

  (use-package persp-mode-projectile-bridge
    :straight
      (:type git :host github :repo "Bad-ptr/persp-mode-projectile-bridge.el")
    :ensure t
    :after persp-mode
    :init
    (with-eval-after-load "persp-mode-projectile-bridge-autoloads"
      (add-hook 'persp-mode-projectile-bridge-mode-hook
                #'(lambda ()
                    (if persp-mode-projectile-bridge-mode
                        (persp-mode-projectile-bridge-find-perspectives-for-all-buffers)
                      (persp-mode-projectile-bridge-kill-perspectives))))
      (add-hook 'after-init-hook
                #'(lambda ()
                    (persp-mode-projectile-bridge-mode 1))
                t))
    )
#+end_src


# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
# eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
# End:
